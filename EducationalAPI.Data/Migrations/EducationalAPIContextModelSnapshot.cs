// <auto-generated />
using System;
using EducationalAPI.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationalAPI.Data.Migrations
{
    [DbContext(typeof(EducationalAPIContext))]
    partial class EducationalAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EducationalAPI.Data.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<int?>("AmountOfMaterials")
                        .HasColumnType("int");

                    b.Property<string>("AuthorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorDesc = "Mentor and programmer"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorDesc = "Some random guy with a webcam"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorDesc = "Mood booster and lifestyle coach"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorDesc = "It just works"
                        });
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.EduMatNavpoint", b =>
                {
                    b.Property<int>("EduMatNavpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EduMatNavpointId"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("EduMatLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EduMatTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EduMatTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EduMatTypeId")
                        .HasColumnType("int");

                    b.HasKey("EduMatNavpointId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EduMatTypeId");

                    b.ToTable("EduMatNavpoints");

                    b.HasData(
                        new
                        {
                            EduMatNavpointId = 1,
                            AuthorId = 4,
                            EduMatLocation = "My ssd",
                            EduMatTimeCreated = new DateTime(2022, 8, 8, 12, 57, 29, 784, DateTimeKind.Local).AddTicks(5864),
                            EduMatTitle = "Yes man",
                            EduMatTypeId = 2
                        },
                        new
                        {
                            EduMatNavpointId = 2,
                            AuthorId = 1,
                            EduMatLocation = "Web",
                            EduMatTimeCreated = new DateTime(2022, 8, 8, 12, 57, 29, 784, DateTimeKind.Local).AddTicks(5922),
                            EduMatTitle = "No man",
                            EduMatTypeId = 2
                        },
                        new
                        {
                            EduMatNavpointId = 3,
                            AuthorId = 4,
                            EduMatLocation = "Web",
                            EduMatTimeCreated = new DateTime(2022, 8, 8, 12, 57, 29, 784, DateTimeKind.Local).AddTicks(5924),
                            EduMatTitle = "Cat video",
                            EduMatTypeId = 1
                        },
                        new
                        {
                            EduMatNavpointId = 4,
                            AuthorId = 3,
                            EduMatLocation = "Lost",
                            EduMatTimeCreated = new DateTime(2022, 8, 8, 12, 57, 29, 784, DateTimeKind.Local).AddTicks(5926),
                            EduMatTitle = "Dog teaches programming",
                            EduMatTypeId = 3
                        },
                        new
                        {
                            EduMatNavpointId = 5,
                            AuthorId = 1,
                            EduMatLocation = "Stolen",
                            EduMatTimeCreated = new DateTime(2022, 8, 8, 12, 57, 29, 784, DateTimeKind.Local).AddTicks(5928),
                            EduMatTitle = "Coincidence",
                            EduMatTypeId = 4
                        });
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.EduMatType", b =>
                {
                    b.Property<int>("EduMatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EduMatTypeId"), 1L, 1);

                    b.Property<string>("EduMatTypeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EduMatTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EduMatTypeId");

                    b.ToTable("EduMatTypes");

                    b.HasData(
                        new
                        {
                            EduMatTypeId = 1,
                            EduMatTypeDesc = "It's a video.",
                            EduMatTypeName = "Video"
                        },
                        new
                        {
                            EduMatTypeId = 2,
                            EduMatTypeDesc = "It's a written article.",
                            EduMatTypeName = "Article"
                        },
                        new
                        {
                            EduMatTypeId = 3,
                            EduMatTypeDesc = "It's a type of knowledge transfer directly into a brain",
                            EduMatTypeName = "DT"
                        },
                        new
                        {
                            EduMatTypeId = 4,
                            EduMatTypeDesc = "Long form audio.",
                            EduMatTypeName = "Podcast"
                        });
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int?>("EduMatNavpointId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewContents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewScore")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("EduMatNavpointId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            ReviewContents = "Very nice",
                            ReviewScore = 5
                        },
                        new
                        {
                            ReviewId = 2,
                            ReviewContents = "Very sad",
                            ReviewScore = 1
                        },
                        new
                        {
                            ReviewId = 3,
                            ReviewContents = "Sad",
                            ReviewScore = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            ReviewContents = "Nice",
                            ReviewScore = 7
                        },
                        new
                        {
                            ReviewId = 5,
                            ReviewContents = "Based",
                            ReviewScore = 9
                        });
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserLogin = "admin",
                            UserPassword = "admin",
                            UserRole = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            UserLogin = "user",
                            UserPassword = "user",
                            UserRole = "User"
                        });
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.EduMatNavpoint", b =>
                {
                    b.HasOne("EducationalAPI.Data.Models.Author", "EduMatAuthor")
                        .WithMany("EduMatNavpoints")
                        .HasForeignKey("AuthorId");

                    b.HasOne("EducationalAPI.Data.Models.EduMatType", "EduMatType")
                        .WithMany()
                        .HasForeignKey("EduMatTypeId");

                    b.Navigation("EduMatAuthor");

                    b.Navigation("EduMatType");
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.Review", b =>
                {
                    b.HasOne("EducationalAPI.Data.Models.EduMatNavpoint", "EduMatNavpoint")
                        .WithMany("EduMatReviews")
                        .HasForeignKey("EduMatNavpointId");

                    b.Navigation("EduMatNavpoint");
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.Author", b =>
                {
                    b.Navigation("EduMatNavpoints");
                });

            modelBuilder.Entity("EducationalAPI.Data.Models.EduMatNavpoint", b =>
                {
                    b.Navigation("EduMatReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
